# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_model_schema import ApiModelSchema

class TestApiModelSchema(unittest.TestCase):
    """ApiModelSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiModelSchema:
        """Test ApiModelSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiModelSchema`
        """
        model = ApiModelSchema()
        if include_optional:
            return ApiModelSchema(
                fields = [
                    openapi_client.models.api/field_schema.api.FieldSchema(
                        auto_increment = True, 
                        db_column_name = 'id', 
                        is_primary_key = True, 
                        name = 'id', 
                        operators = [eq, neq, like], 
                        type = 'string', )
                    ],
                relationships = [
                    openapi_client.models.api/relationship_schema.api.RelationshipSchema(
                        foreign_key = 'post_id', 
                        is_polymorphic = False, 
                        is_slice = True, 
                        join_table = 'post_tag', 
                        json_name = 'posts', 
                        name = 'Posts', 
                        polymorphic_type = '', 
                        references = 'post_id', 
                        related_model = 'Post', 
                        related_table = 'posts', 
                        type = 'hasMany', )
                    ]
            )
        else:
            return ApiModelSchema(
        )
        """

    def testApiModelSchema(self):
        """Test ApiModelSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

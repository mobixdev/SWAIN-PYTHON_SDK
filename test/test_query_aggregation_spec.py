# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query_aggregation_spec import QueryAggregationSpec

class TestQueryAggregationSpec(unittest.TestCase):
    """QueryAggregationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryAggregationSpec:
        """Test QueryAggregationSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryAggregationSpec`
        """
        model = QueryAggregationSpec()
        if include_optional:
            return QueryAggregationSpec(
                expressions = [
                    None
                    ],
                functions = [
                    openapi_client.models.query/aggregate_function_spec.query.AggregateFunctionSpec(
                        alias = '', 
                        field = '', 
                        type = '', )
                    ],
                group_by = [
                    ''
                    ]
            )
        else:
            return QueryAggregationSpec(
        )
        """

    def testQueryAggregationSpec(self):
        """Test QueryAggregationSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_aggregation_spec import QueryAggregationSpec
from openapi_client.models.query_sort_spec import QuerySortSpec
from typing import Optional, Set
from typing_extensions import Self

class QueryFilter(BaseModel):
    """
    Filter conditions for querying entities using complex expressions Supports logical operations (AND, OR, NOT), field comparisons, and relationship filtering Example: { \"expressions\": [ {\"field\": \"age\", \"operator\": \"gte\", \"value\": 18}, { \"operator\": \"AND\", \"expressions\": [ {\"field\": \"status\", \"operator\": \"eq\", \"value\": \"active\"} ] } ] }
    """ # noqa: E501
    aggregations: Optional[QueryAggregationSpec] = Field(default=None, description="@Description Aggregations can specify functions like COUNT, SUM, GROUP BY, etc. @Description If not provided, no aggregations will be performed. @Description Used for data analysis and reporting queries")
    expressions: Optional[List[Dict[str, Any]]] = Field(default=None, description="@Description Array of expressions to filter entities @Description Each expression can be a FieldExpression, LogicalExpression, or RelationshipExpression @Description If empty, no filtering will be applied")
    projections: Optional[List[StrictStr]] = Field(default=None, description="@Description Array of field names to select from the main entity @Description If empty, all fields will be selected @Description Example: [\"id\", \"name\", \"email\"] to select only those fields")
    sort: Optional[List[QuerySortSpec]] = Field(default=None, description="@Description Array of sort specifications to order the results @Description Example: [{\"field\": \"name\", \"direction\": \"asc\"}, {\"field\": \"createdAt\", \"direction\": \"desc\"}] @Description Field names can be struct field names or database column names. Direction is case-insensitive ('asc' or 'desc').")
    __properties: ClassVar[List[str]] = ["aggregations", "expressions", "projections", "sort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregations
        if self.aggregations:
            _dict['aggregations'] = self.aggregations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregations": QueryAggregationSpec.from_dict(obj["aggregations"]) if obj.get("aggregations") is not None else None,
            "expressions": obj.get("expressions"),
            "projections": obj.get("projections"),
            "sort": [QuerySortSpec.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None
        })
        return _obj



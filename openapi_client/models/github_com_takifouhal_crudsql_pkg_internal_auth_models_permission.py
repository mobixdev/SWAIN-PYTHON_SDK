# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GithubComTakifouhalCrudsqlPkgInternalAuthModelsPermission(BaseModel):
    """
    GithubComTakifouhalCrudsqlPkgInternalAuthModelsPermission
    """ # noqa: E501
    allowed_actions: Optional[StrictStr] = Field(default=None, description="Comma-separated actions: \"read,create,update,delete\", \"*\"")
    created_at: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    entity_name: Optional[StrictStr] = Field(default=None, description="e.g., \"users\", \"orders\", \"*\"")
    id: Optional[StrictInt] = None
    roles: Optional[List[GithubComTakifouhalCrudsqlPkgInternalAuthModelsRole]] = None
    scope_expression: Optional[List[StrictInt]] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allowed_actions", "created_at", "description", "entity_name", "id", "roles", "scope_expression", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GithubComTakifouhalCrudsqlPkgInternalAuthModelsPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GithubComTakifouhalCrudsqlPkgInternalAuthModelsPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_actions": obj.get("allowed_actions"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "entity_name": obj.get("entity_name"),
            "id": obj.get("id"),
            "roles": [GithubComTakifouhalCrudsqlPkgInternalAuthModelsRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "scope_expression": obj.get("scope_expression"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

from openapi_client.models.github_com_takifouhal_crudsql_pkg_internal_auth_models_role import GithubComTakifouhalCrudsqlPkgInternalAuthModelsRole
# TODO: Rewrite to not use raise_errors
GithubComTakifouhalCrudsqlPkgInternalAuthModelsPermission.model_rebuild(raise_errors=False)


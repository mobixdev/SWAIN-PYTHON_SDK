# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryFilterResponse(BaseModel):
    """
    Paginated response containing filtered entities and metadata Used for both simple list operations and complex filtered queries Contains both the data and pagination information
    """ # noqa: E501
    data: Optional[Dict[str, Any]] = Field(default=None, description="@Description Array of entities matching the filter conditions @Description For relationship queries, includes related entities based on the filter @Description The actual type depends on the entity being queried")
    page: Optional[StrictInt] = Field(default=None, description="@Description Current page number (1-based indexing) @Description Example: page=2 returns the second page of results @Description Default is 1 if not specified")
    page_size: Optional[StrictInt] = Field(default=None, description="@Description Number of items per page (default may vary) @Description Example: page_size=20 returns 20 items per page @Description Default is typically 10 or 20 depending on configuration")
    total: Optional[StrictInt] = Field(default=None, description="@Description Total number of records matching the filter conditions @Description Used for calculating pagination metadata @Description May be estimated for very large result sets")
    total_pages: Optional[StrictInt] = Field(default=None, description="@Description Total number of pages based on total records and page size @Description Calculated as ceil(total/page_size) @Description Used for pagination UI components")
    __properties: ClassVar[List[str]] = ["data", "page", "page_size", "total", "total_pages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryFilterResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryFilterResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "page": obj.get("page"),
            "page_size": obj.get("page_size"),
            "total": obj.get("total"),
            "total_pages": obj.get("total_pages")
        })
        return _obj



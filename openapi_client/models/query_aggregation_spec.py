# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_aggregate_function_spec import QueryAggregateFunctionSpec
from typing import Optional, Set
from typing_extensions import Self

class QueryAggregationSpec(BaseModel):
    """
    Allows specifying functions like COUNT, SUM on fields, with an optional group-by clause Used for aggregating data in queries, similar to SQL GROUP BY with aggregate functions Example: {\"functions\": [{\"type\": \"COUNT\", \"field\": \"id\"}], \"group_by\": [\"status\"]}
    """ # noqa: E501
    expressions: Optional[List[Dict[str, Any]]] = Field(default=None, description="@Description Optional aggregator-based conditions to be applied in a HAVING clause (if using SQL) @Description These expressions may reference aggregator functions like SUM(...) or COUNT(...)")
    functions: Optional[List[QueryAggregateFunctionSpec]] = Field(default=None, description="@Description A list of aggregation functions (e.g., COUNT, SUM, MIN, MAX) to apply @Description Each function specifies the type, field, and optional alias")
    group_by: Optional[List[StrictStr]] = Field(default=None, description="@Description Fields for grouping results (e.g., by \"status\" or [\"status\",\"category\"]) @Description Similar to SQL GROUP BY clause")
    __properties: ClassVar[List[str]] = ["expressions", "functions", "group_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryAggregationSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in functions (list)
        _items = []
        if self.functions:
            for _item_functions in self.functions:
                if _item_functions:
                    _items.append(_item_functions.to_dict())
            _dict['functions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryAggregationSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expressions": obj.get("expressions"),
            "functions": [QueryAggregateFunctionSpec.from_dict(_item) for _item in obj["functions"]] if obj.get("functions") is not None else None,
            "group_by": obj.get("group_by")
        })
        return _obj



# coding: utf-8

"""
    SWAIN API

    A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models SWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger/OpenAPI documentation - Multiple database support (SQL & NoSQL)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiRelationshipSchema(BaseModel):
    """
    Schema information for a model relationship
    """ # noqa: E501
    foreign_key: Optional[StrictStr] = Field(default=None, description="ForeignKey is the foreign key in the relationship", alias="foreignKey")
    is_polymorphic: Optional[StrictBool] = Field(default=None, description="IsPolymorphic indicates if the relationship is polymorphic", alias="isPolymorphic")
    is_slice: Optional[StrictBool] = Field(default=None, description="IsSlice indicates if the relationship is a slice", alias="isSlice")
    join_table: Optional[StrictStr] = Field(default=None, description="JoinTable is the join table in the relationship", alias="joinTable")
    json_name: Optional[StrictStr] = Field(default=None, description="JsonName of the relationship (from JSON tag if available)", alias="jsonName")
    name: Optional[StrictStr] = Field(default=None, description="Name of the relationship (from JSON tag if available)")
    polymorphic_type: Optional[StrictStr] = Field(default=None, description="PolymorphicType is the type of the polymorphic relationship", alias="polymorphicType")
    references: Optional[StrictStr] = Field(default=None, description="References are the references in the relationship")
    related_model: Optional[StrictStr] = Field(default=None, description="Name of the related model", alias="relatedModel")
    related_table: Optional[StrictStr] = Field(default=None, description="Name of the related table", alias="relatedTable")
    type: Optional[StrictStr] = Field(default=None, description="Type of relationship (hasOne, hasMany, belongsTo, manyToMany)")
    __properties: ClassVar[List[str]] = ["foreignKey", "isPolymorphic", "isSlice", "joinTable", "jsonName", "name", "polymorphicType", "references", "relatedModel", "relatedTable", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiRelationshipSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiRelationshipSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "foreignKey": obj.get("foreignKey"),
            "isPolymorphic": obj.get("isPolymorphic"),
            "isSlice": obj.get("isSlice"),
            "joinTable": obj.get("joinTable"),
            "jsonName": obj.get("jsonName"),
            "name": obj.get("name"),
            "polymorphicType": obj.get("polymorphicType"),
            "references": obj.get("references"),
            "relatedModel": obj.get("relatedModel"),
            "relatedTable": obj.get("relatedTable"),
            "type": obj.get("type")
        })
        return _obj


